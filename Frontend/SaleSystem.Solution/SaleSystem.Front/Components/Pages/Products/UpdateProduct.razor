@page "/product/update/{ProductId:int}"

@rendermode InteractiveServer

@inject NavigationManager NavigationManager
@inject IProductService ProductService
@inject IProductMappers ProductMappers

<h3>UpdateProduct</h3>

<div class="container mx-auto px-4 py-6">
    <EditForm Model="@ProductRequestDTO" OnValidSubmit="@UpdateProductAsync" FormName="UpdateProductForm" method="post">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-4">
            <label for="productName" class="block text-gray-700">Nombre del Producto</label>
            <InputText id="productName" class="form-input mt-1 block w-full" @bind-Value="ProductRequestDTO.Name" />
        </div>

        <div class="mb-4">
            <label for="productCategory" class="block text-gray-700">Categoria</label>
            <InputText id="productCategory" class="form-input mt-1 block w-full" @bind-Value="ProductRequestDTO.Name" />
        </div>

        <div class="mb-4">
            <label for="description" class="block text-gray-700">Descripcion</label>
            <InputText id="description" class="form-input mt-1 block w-full" @bind-Value="ProductRequestDTO.Description" />
        </div>

        <div class="mb-4">
            <label for="price" class="block text-gray-700">Precio</label>
            <InputNumber id="price" class="form-input mt-1 block w-full" @bind-Value="ProductRequestDTO.Price" />
        </div>

        <div class="flex items-center justify-between">
            <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                Guardar Cambios
            </button>
            @* <button type="button" class="bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded" @onclick="CancelEdit">
            Cancelar
            </button> *@
        </div>
    </EditForm>
</div>


@code {
    [Parameter]
    public int ProductId { get; set; }

    [SupplyParameterFromForm]
    private ProductRequestDTO ProductRequestDTO { get; set; } = new ProductRequestDTO();

    protected override async Task OnInitializedAsync()
    {
        var productToUpdate = await ProductService.GetProductById(ProductId);
        ProductRequestDTO.Name = productToUpdate.Name;
        ProductRequestDTO.CategoryId = productToUpdate.CategoryId;
        ProductRequestDTO.Description = productToUpdate.Description;
        ProductRequestDTO.Price = productToUpdate.Price;
    }

    private async Task UpdateProductAsync()
    {
        await ProductService.UpdateProduct(ProductId, ProductRequestDTO);
        NavigationManager.NavigateTo("/Products");
    }
}
