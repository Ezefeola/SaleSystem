@page "/sales/update/{SaleId:int}"

@rendermode InteractiveServer

@inject ISaleService SaleService
@inject IProductService ProductService
@inject IClientService ClientService
@inject NavigationManager NavigationManager

<h3 class="text-2xl font-semibold mb-4">Actualizar Venta</h3>

<EditForm Model="@existingSale" OnValidSubmit="@UpdateSaleAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <!-- Selección de Cliente -->
    <div class="mb-4">
        <label for="clientSelect" class="block text-gray-700">Seleccione Cliente</label>
        <InputSelect id="clientSelect" @bind-Value="existingSale.ClientId" class="form-select mt-1 block w-full">
            <option value="">Seleccione un cliente</option>
            @foreach (var client in clients)
            {
                <option value="@client.Id">@client.Client</option>
            }
        </InputSelect>
    </div>

    <div class="mb-4">
        <label for="date" class="block text-gray-700">Fecha</label>
        <InputDate id="date" @bind-Value="existingSale.Date" class="form-input mt-1 block w-full" />
    </div>

    <h4 class="text-xl font-semibold mb-2">Elementos de la Venta</h4>

    @if (existingSale.SaleItemModel != null && existingSale.SaleItemModel.Count > 0)
    {
        @foreach (var item in existingSale.SaleItemModel)
        {
            <div class="mb-4 p-4 border border-gray-200 rounded">
                <div class="mb-2">
                    <label for="productId" class="block text-gray-700">Producto</label>
                    <InputSelect id="productId" @bind-Value="item.ProductId" class="form-select mt-1 block w-full" @onchange="@(e => OnProductSelected(item, e.Value))">
                        <option value="">Selecciona un producto</option>
                        @foreach (var product in products)
                        {
                            <option value="@product.Id">@product.Name</option>
                        }
                    </InputSelect>
                </div>

                <div class="mb-2">
                    <label for="quantity" class="block text-gray-700">Cantidad</label>
                    <InputNumber id="quantity" @bind-Value="item.Quantity" class="form-input mt-1 block w-full" @oninput="RecalculateTotal" />
                </div>

                @* <InputNumber id="unitPrice" Value="@(item.PricePerUnit)" class="form-input mt-1 block w-full" readonly /> *@
                <div class="mb-2">
                    <label for="unitPrice" class="block text-gray-700">Precio Unitario</label>
                    <InputNumber id="unitPrice" @bind-Value="item.PricePerUnit" class="form-input mt-1 block w-full" readonly />
                </div>

                    @* <InputNumber id="totalPrice" Value="@GetItemTotal(item)" class="form-input mt-1 block w-full" readonly /> *@
                <div class="mb-2">
                    <label for="totalPrice" class="block text-gray-700">Total del Producto</label>
                    @* <InputNumber id="totalPrice" @bind-Value="@GetItemTotal(item)" class="form-input mt-1 block w-full" readonly /> *@
                    <input id="totalPrice" value="@(item.PricePerUnit * item.Quantity)" class="form-input mt-1 block w-full" readonly />
                </div>
            </div>
        }
    }
    else
    {
        <p>No hay elementos de venta para mostrar.</p>
    }

    <div class="mb-4">
        <label class="block text-gray-700 font-bold">Total de la Venta: </label>
        <span>@existingSale.Total.ToString("C")</span>
    </div>

    <div class="flex items-center justify-between">
        <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
            Guardar Cambios
        </button>
        <button type="button" class="bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded" @onclick="Cancel">
            Cancelar
        </button>
    </div>
</EditForm>

@code {
    [Parameter]
    public int SaleId { get; set; }

    private SaleRequestDTO existingSale { get; set; } = new SaleRequestDTO
        {
            SaleItemModel = new List<SaleItemRequestDTO>() // Asegúrate de inicializar la lista aquí
        };

    private List<ProductResponseDTO> products { get; set; } = new List<ProductResponseDTO>();
    private List<ClientResponseDTO> clients { get; set; } = new List<ClientResponseDTO>();

    protected override async Task OnInitializedAsync()
    {
        // Cargar todos los productos y clientes al inicializar la vista
        products = await ProductService.GetProducts();
        clients = await ClientService.GetClients();

        // Cargar los datos de la venta existente
        var saleToUpdate = await SaleService.GetSaleById(SaleId);

        if (saleToUpdate != null && saleToUpdate.SaleItemModel != null)
        {
            existingSale.ClientId = saleToUpdate.ClientId;
            existingSale.Date = saleToUpdate.Date;
            existingSale.SaleItemModel = saleToUpdate.SaleItemModel.Select(item => new SaleItemRequestDTO
            {
                ProductId = item.ProductId,
                Quantity = item.Quantity,
                PricePerUnit = item.PricePerUnit
            }).ToList();

            Console.WriteLine($"Sale has {existingSale.SaleItemModel.Count} items.");  // Depuración
        }
        else
        {
            Console.WriteLine("Sale not found, or sale has no items.");
        }
    }

    private async Task UpdateSaleAsync()
    {
        try
        {
            await SaleService.UpdateSale(SaleId, existingSale);
            NavigationManager.NavigateTo("/sales");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al actualizar la venta: {ex.Message}");
        }
    }

    private decimal GetItemTotal(SaleItemRequestDTO item)
    {
        var total = item.Quantity * item.PricePerUnit;
        return total;
    }

    private void OnProductSelected(SaleItemRequestDTO item, object selectedValue)
    {
        var selectedProduct = products.FirstOrDefault(p => p.Id == (int)selectedValue);
        if (selectedProduct != null)
        {
            item.PricePerUnit = selectedProduct.Price;
        }
        RecalculateTotal();
    }

    private void RecalculateTotal()
    {
        existingSale.SaleItemModel.Sum(item => GetItemTotal(item));
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/sales");
    }
}
